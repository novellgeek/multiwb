import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
import json
import ctypes
import ctypes.wintypes
import subprocess
import tempfile
from collections import defaultdict

MONITOR_PRESETS = {
    "Custom": (None, None),
    "Vertical": (2, 1),
    "Horizontal": (1, 2),
    "2x2 Grid": (2, 2),
    "1V2H": (None, None),  # 1 vertical, 2 horizontal special
}

def set_funky_style(root):
    style = ttk.Style(root)
    style.theme_use('clam')
    style.configure('TFrame', background='#222244')
    style.configure('TLabel', background='#222244', foreground='#00FFFF', font=('Comic Sans MS', 12, 'bold'))
    style.configure('TButton', background='#00FFFF', foreground='#222244', font=('Comic Sans MS', 11, 'bold'))
    style.map('TButton', background=[('active', '#FF00FF')], foreground=[('active', '#FFFF00')])
    style.configure('TCheckbutton', background='#222244', foreground='#FFAA00', font=('Comic Sans MS', 11))
    style.configure('TLabelframe', background='#222244', foreground='#FFAA00', font=('Comic Sans MS', 12, 'bold'))
    style.configure('TCombobox', fieldbackground='#222244', background='#00FFFF', foreground='#222244', font=('Comic Sans MS', 11))
    style.configure('TEntry', fieldbackground='#222244', background='#00FFFF', foreground='#222244')

class MultiMonitorApp:
    def get_windows_monitors(self):
        monitors = []
        dpi_scale = ctypes.windll.shcore.GetScaleFactorForDevice(0) / 100.0 if hasattr(ctypes.windll, 'shcore') else 1.0

        def _callback(hMonitor, hdcMonitor, lprcMonitor, dwData):
            r = lprcMonitor.contents
            monitors.append({
                'x': int(r.left * dpi_scale),
                'y': int(r.top * dpi_scale),
                'width': int((r.right - r.left) * dpi_scale),
                'height': int((r.bottom - r.top) * dpi_scale)
            })
            return 1

        MONITORENUMPROC = ctypes.WINFUNCTYPE(
            ctypes.c_int,
            ctypes.wintypes.HMONITOR,
            ctypes.wintypes.HDC,
            ctypes.POINTER(ctypes.wintypes.RECT),
            ctypes.wintypes.LPARAM
        )

        ctypes.windll.user32.SetProcessDPIAware()
        ctypes.windll.user32.EnumDisplayMonitors(
            0, 0, MONITORENUMPROC(_callback), 0
        )

        return sorted(monitors, key=lambda m: (m['x'], m['y']))

    def __init__(self, root):
        self.root = root
        self.root.title("ü¶Ñ Funky Multi-Monitor Web Launcher ü¶Ñ")
        set_funky_style(self.root)

        self.urls = []
        self.assignments = []
        self.fullscreens = []
        self.zoom_factors = []
        self.monitors = self.get_windows_monitors()

        self.mode = tk.StringVar(value="list")
        self.fullscreen = tk.BooleanVar(value=False)

        # Per-monitor grid settings and presets
        self.monitor_grids = {i: [tk.IntVar(value=2), tk.IntVar(value=2)] for i in range(len(self.monitors))}
        self.monitor_presets = {i: tk.StringVar(value="Custom") for i in range(len(self.monitors))}

        # Per-URL region for 1V2H layout (dict: url_index -> region)
        self.url_regions = {}

        self.build_gui()

    def build_gui(self):
        frame = ttk.Frame(self.root, padding=10)
        frame.grid(row=0, column=0, sticky="nsew")

        url_label = ttk.Label(frame, text="URLs with Monitor Assignment:")
        url_label.grid(row=0, column=0, columnspan=8, sticky="w", pady=8)

        self.url_frame = ttk.Frame(frame)
        self.url_frame.grid(row=1, column=0, columnspan=8, sticky="we")

        add_url_btn = ttk.Button(frame, text="‚ûï Add URL", command=self.add_url)
        add_url_btn.grid(row=2, column=0, sticky="we", pady=4)
        del_url_btn = ttk.Button(frame, text="‚ûñ Delete Selected", command=self.del_url)
        del_url_btn.grid(row=2, column=1, sticky="we", pady=4)
        preview_btn = ttk.Button(frame, text="üëÅÔ∏è Preview Grid", command=self.show_preview)
        preview_btn.grid(row=2, column=2, sticky="we", pady=4)
        show_ids_btn = ttk.Button(frame, text="üñ•Ô∏è Show Monitor IDs", command=self.show_monitor_ids)
        show_ids_btn.grid(row=2, column=3, sticky="we", pady=4)
        launch_btn = ttk.Button(frame, text="üöÄ Launch", command=self.launch_windows)
        launch_btn.grid(row=2, column=4, sticky="we", pady=4)
        save_btn = ttk.Button(frame, text="üíæ Save Config", command=self.save_config)
        save_btn.grid(row=2, column=5, sticky="we", pady=4)
        load_btn = ttk.Button(frame, text="üìÇ Load Config", command=self.load_config)
        load_btn.grid(row=2, column=6, sticky="we", pady=4)

        mode_frame = ttk.LabelFrame(frame, text="Mode", padding=8)
        mode_frame.grid(row=3, column=0, columnspan=8, pady=5, sticky="we")
        ttk.Radiobutton(mode_frame, text="List Mode", variable=self.mode, value="list").pack(side="left", padx=10)
        ttk.Radiobutton(mode_frame, text="Grid Mode", variable=self.mode, value="grid").pack(side="left", padx=10)

        grid_settings_frame = ttk.LabelFrame(frame, text="Per-Monitor Grid Settings", padding=10)
        grid_settings_frame.grid(row=4, column=0, columnspan=8, sticky="we", pady=10)
        for i, mon in enumerate(self.monitors):
            ttk.Label(grid_settings_frame, text=f"Monitor {i+1}").grid(row=i, column=0, padx=2)
            ttk.Label(grid_settings_frame, text="Rows:").grid(row=i, column=1)
            ttk.Entry(grid_settings_frame, textvariable=self.monitor_grids[i][0], width=5).grid(row=i, column=2)
            ttk.Label(grid_settings_frame, text="Cols:").grid(row=i, column=3)
            ttk.Entry(grid_settings_frame, textvariable=self.monitor_grids[i][1], width=5).grid(row=i, column=4)
            preset_combo = ttk.Combobox(grid_settings_frame, values=list(MONITOR_PRESETS.keys()),
                                        textvariable=self.monitor_presets[i], width=14, state="readonly")
            preset_combo.grid(row=i, column=5, padx=2)
            preset_combo.set("Custom")
            preset_combo.bind("<<ComboboxSelected>>", lambda e, idx=i: self.apply_monitor_preset(idx))

        ttk.Checkbutton(frame, text="Default Fullscreen", variable=self.fullscreen).grid(row=5, column=0, sticky="w")
        self.refresh_url_list()

    def apply_monitor_preset(self, idx):
        preset = self.monitor_presets[idx].get()
        rows, cols = MONITOR_PRESETS[preset]
        if rows is not None and cols is not None:
            self.monitor_grids[idx][0].set(rows)
            self.monitor_grids[idx][1].set(cols)
        self.refresh_url_list()

    def show_preview(self):
        preview = tk.Toplevel(self.root)
        preview.title("Monitor Assignment Preview")
        set_funky_style(preview)
        for idx, mon in enumerate(self.monitors):
            label = f"Monitor {idx+1}"
            assigned_urls = [self.urls[i] for i, a in enumerate(self.assignments) if a == label]
            text = "\n".join(assigned_urls) if assigned_urls else "(None)"
            frame = ttk.LabelFrame(preview, text=label, padding=10)
            frame.grid(row=idx // 2, column=idx % 2, padx=10, pady=10, sticky="nsew")
            label_widget = ttk.Label(frame, text=text, justify="left")
            label_widget.pack()

    def show_monitor_ids(self):
        for idx, mon in enumerate(self.monitors):
            overlay = tk.Toplevel()
            overlay.overrideredirect(True)
            overlay.attributes("-topmost", True)
            overlay.geometry(f"200x100+{mon['x']+50}+{mon['y']+50}")
            label = tk.Label(
                overlay,
                text=f"Monitor {idx+1}",
                font=("Comic Sans MS", 24, "bold"),
                bg="#222244",
                fg="#FFFF00"
            )
            label.pack(expand=True, fill="both")
            overlay.after(2000, overlay.destroy)

    def refresh_url_list(self):
        for widget in self.url_frame.winfo_children():
            widget.destroy()

        # Header row
        ttk.Label(self.url_frame, text="URL", style='TLabel').grid(row=0, column=0, sticky="w", padx=2)
        ttk.Label(self.url_frame, text="Monitor", style='TLabel').grid(row=0, column=1, padx=5)
        ttk.Label(self.url_frame, text="Fullscreen", style='TLabel').grid(row=0, column=2)
        ttk.Label(self.url_frame, text="Zoom", style='TLabel').grid(row=0, column=3)
        ttk.Label(self.url_frame, text="Region", style='TLabel').grid(row=0, column=4)

        for i, url in enumerate(self.urls):
            url_lbl = ttk.Label(self.url_frame, text=url, style='TLabel')
            url_lbl.grid(row=i+1, column=0, sticky="w", padx=2)
            url_lbl.bind("<Double-Button-1>", lambda e, idx=i: self.edit_url(idx))

            combo = ttk.Combobox(self.url_frame, values=[f"Monitor {j+1}" for j in range(len(self.monitors))], width=12)
            combo.grid(row=i+1, column=1, padx=5)
            if i < len(self.assignments):
                combo.set(self.assignments[i])
            else:
                combo.set("")
                self.assignments.append("")
            combo.bind("<<ComboboxSelected>>", lambda e, idx=i: self.update_assignment(idx, e))

            fs_chk = ttk.Checkbutton(self.url_frame, command=lambda idx=i: self.toggle_fullscreen(idx))
            fs_chk.grid(row=i+1, column=2)
            if i >= len(self.fullscreens):
                self.fullscreens.append(self.fullscreen.get())
            if self.fullscreens[i]:
                fs_chk.state(['selected'])
            else:
                fs_chk.state(['!selected'])

            ttk.Label(self.url_frame, text="Zoom:").grid(row=i+1, column=3, sticky="e")
            zoom_var = tk.DoubleVar(value=1.0 if i >= len(self.zoom_factors) else self.zoom_factors[i])
            zoom_entry = ttk.Entry(self.url_frame, textvariable=zoom_var, width=5)
            zoom_entry.grid(row=i+1, column=3, sticky="w")
            if i >= len(self.zoom_factors):
                self.zoom_factors.append(1.0)
            else:
                self.zoom_factors[i] = zoom_var.get()
            zoom_var.trace_add("write", lambda *_, idx=i, v=zoom_var: self.update_zoom(idx, v))

            # REGIONS for 1V2H per monitor
            assigned_monitor = self.assignments[i]
            show_region = False
            if assigned_monitor and assigned_monitor.startswith("Monitor"):
                m_idx = int(assigned_monitor.split(" ")[1]) - 1
                preset = self.monitor_presets[m_idx].get()
                if preset == "1V2H":
                    show_region = True
            region_options = ["Left", "Top Right", "Bottom Right"]
            if show_region:
                region_var = tk.StringVar(value=self.url_regions.get(i, region_options[0]))
                region_combo = ttk.Combobox(self.url_frame, values=region_options, textvariable=region_var, width=12, state='readonly')
                region_combo.grid(row=i+1, column=4)
                region_combo.bind("<<ComboboxSelected>>", lambda e, idx=i, v=region_var: self.update_region(idx, v))
                self.url_regions[i] = region_var.get()
            else:
                ttk.Label(self.url_frame, text="-").grid(row=i+1, column=4)
                if i in self.url_regions:
                    del self.url_regions[i]

    def update_assignment(self, index, event):
        combo = event.widget
        self.assignments[index] = combo.get()
        self.refresh_url_list()

    def toggle_fullscreen(self, index):
        self.fullscreens[index] = not self.fullscreens[index]

    def add_url(self):
        new_url = simpledialog.askstring("Add URL", "Enter URL:")
        if new_url:
            self.urls.append(new_url)
            self.assignments.append("Monitor 1")
            self.fullscreens.append(self.fullscreen.get())
            self.zoom_factors.append(1.0)
            self.refresh_url_list()

    def del_url(self):
        if not self.urls:
            return
        index = len(self.urls) - 1
        self.urls.pop(index)
        self.assignments.pop(index)
        self.fullscreens.pop(index)
        self.zoom_factors.pop(index)
        if index in self.url_regions:
            del self.url_regions[index]
        self.refresh_url_list()

    def edit_url(self, idx):
        new_url = simpledialog.askstring("Edit URL", "Enter new URL:", initialvalue=self.urls[idx])
        if new_url:
            self.urls[idx] = new_url
            self.refresh_url_list()

    def update_zoom(self, idx, var):
        try:
            val = float(var.get())
            self.zoom_factors[idx] = val
        except Exception:
            self.zoom_factors[idx] = 1.0

    def update_region(self, idx, var):
        self.url_regions[idx] = var.get()

    def save_config(self):
        config = {
            "urls": self.urls,
            "assignments": self.assignments,
            "fullscreens": self.fullscreens,
            "zoom_factors": self.zoom_factors,
            "mode": self.mode.get(),
            "fullscreen": self.fullscreen.get(),
            "monitor_grids": {
                str(i): [var[0].get(), var[1].get()]
                for i, var in self.monitor_grids.items()
            },
            "monitor_presets": {str(i): self.monitor_presets[i].get() for i in self.monitor_presets},
            "url_regions": self.url_regions,
        }
        file_path = filedialog.asksaveasfilename(defaultextension=".json", filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, 'w') as f:
                json.dump(config, f, indent=2)

    def load_config(self):
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, 'r') as f:
                config = json.load(f)
                self.urls = config.get("urls", [])
                self.assignments = config.get("assignments", ["" for _ in self.urls])
                self.fullscreens = config.get("fullscreens", [self.fullscreen.get() for _ in self.urls])
                self.zoom_factors = config.get("zoom_factors", [1.0 for _ in self.urls])
                self.mode.set(config.get("mode", "list"))
                self.fullscreen.set(config.get("fullscreen", False))
                monitor_grids = config.get("monitor_grids", {})
                for i in range(len(self.monitors)):
                    if str(i) in monitor_grids:
                        rows, cols = monitor_grids[str(i)]
                        self.monitor_grids[i][0].set(rows)
                        self.monitor_grids[i][1].set(cols)
                monitor_presets = config.get("monitor_presets", {})
                for i in range(len(self.monitors)):
                    if str(i) in monitor_presets:
                        self.monitor_presets[i].set(monitor_presets[str(i)])
                self.url_regions = {int(k): v for k, v in config.get("url_regions", {}).items()}
                self.refresh_url_list()

    def launch_windows(self):
        if not self.urls:
            messagebox.showwarning("No URLs", "Please add at least one URL.")
            return

        window_configs = []
        if self.mode.get() == "list":
            tiling_map = defaultdict(list)
            for i, url in enumerate(self.urls):
                assigned = self.assignments[i]
                if not assigned or not assigned.startswith("Monitor"):
                    messagebox.showerror("Monitor Assignment Missing", f"Please assign a monitor for URL {i+1}.")
                    return
                tiling_map[assigned].append(i)
            for monitor_label, indices in tiling_map.items():
                mon_index = int(monitor_label.split(" ")[1]) - 1
                mon = self.monitors[mon_index]
                tile_count = len(indices)
                tile_w = mon['width'] // tile_count
                for pos, i in enumerate(indices):
                    window_configs.append({
                        "title": f"Display {i+1}",
                        "url": self.urls[i],
                        "x": mon['x'] + pos * tile_w,
                        "y": mon['y'],
                        "width": tile_w,
                        "height": mon['height'],
                        "fullscreen": self.fullscreens[i],
                        "zoom": self.zoom_factors[i]
                    })
        else:
            monitor_map = defaultdict(list)
            for i, assigned in enumerate(self.assignments):
                if assigned and assigned.startswith("Monitor"):
                    mon_index = int(assigned.split(" ")[1]) - 1
                    monitor_map[mon_index].append(i)
            for mon_index, indices in monitor_map.items():
                preset = self.monitor_presets[mon_index].get()
                mon = self.monitors[mon_index]
                if preset == "1V2H":
                    used_regions = set()
                    for i in indices:
                        region = self.url_regions.get(i, "Left")
                        # Prevent duplicate region assignments
                        if region in used_regions:
                            messagebox.showerror("Region Conflict", f"Multiple URLs assigned to '{region}' region on Monitor {mon_index+1}.")
                            break
                        used_regions.add(region)
                        if region == "Left":
                            x, y = mon['x'], mon['y']
                            width = mon['width'] // 2
                            height = mon['height']
                        elif region == "Top Right":
                            x = mon['x'] + mon['width'] // 2
                            y = mon['y']
                            width = mon['width'] // 2
                            height = mon['height'] // 2
                        elif region == "Bottom Right":
                            x = mon['x'] + mon['width'] // 2
                            y = mon['y'] + mon['height'] // 2
                            width = mon['width'] // 2
                            height = mon['height'] // 2
                        else:  # fallback
                            x, y, width, height = mon['x'], mon['y'], mon['width'], mon['height']
                        window_configs.append({
                            "title": f"{region} {i+1}",
                            "url": self.urls[i],
                            "x": x, "y": y, "width": width, "height": height,
                            "fullscreen": self.fullscreens[i],
                            "zoom": self.zoom_factors[i]
                        })
                else:
                    rows = self.monitor_grids[mon_index][0].get()
                    cols = self.monitor_grids[mon_index][1].get()
                    max_cells = rows * cols
                    cell_w = mon['width'] // cols
                    cell_h = mon['height'] // rows
                    for cell_idx, i in enumerate(indices):
                        if cell_idx >= max_cells:
                            messagebox.showerror(
                                "Grid Too Small",
                                f"Monitor {mon_index+1}: Too many URLs assigned for the selected grid size ({rows}√ó{cols})."
                            )
                            break
                        r = cell_idx // cols
                        c = cell_idx % cols
                        window_configs.append({
                            "title": f"Grid {i+1}",
                            "url": self.urls[i],
                            "x": mon['x'] + c * cell_w,
                            "y": mon['y'] + r * cell_h,
                            "width": cell_w,
                            "height": cell_h,
                            "fullscreen": self.fullscreens[i],
                            "zoom": self.zoom_factors[i]
                        })
        with tempfile.NamedTemporaryFile(delete=False, suffix='.json', mode='w') as tf:
            json.dump({"windows": window_configs}, tf)
            tf.flush()
            subprocess.Popen(["python", "launch_windows_runner.py", tf.name])

if __name__ == "__main__":
    root = tk.Tk()
    set_funky_style(root)
    app = MultiMonitorApp(root)
    root.mainloop()
